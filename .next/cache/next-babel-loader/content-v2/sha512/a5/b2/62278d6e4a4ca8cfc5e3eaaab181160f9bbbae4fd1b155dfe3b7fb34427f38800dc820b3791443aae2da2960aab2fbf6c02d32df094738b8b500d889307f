{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport classes from './../../../styles/views/refferal-view.styles.module.scss';\nimport stylesOffice from './../../../styles/layouts/office-layouts-styles.module.scss';\nimport svgSprite from './../../../project/svg/svgSprite';\nimport ContextApp from './../../../context/App/ContextApp';\nimport { NET } from './../../../network';\nimport RefferalHead from './components/RefferalHead';\nimport RefferalBody from './components/RefferalBody';\n\nconst RefferalView = ({\n  modules\n}) => {\n  const router = useRouter();\n  const {\n    stateApp\n  } = useContext(ContextApp);\n  const user = stateApp.user;\n  console.log(user);\n  const {\n    0: userData,\n    1: setUserData\n  } = useState(null);\n  useEffect(async () => {\n    let cleanupFunction = false;\n\n    if (user) {\n      (async () => {\n        fetch(`${NET.BACK_URL}/refferals/${user.id}`, {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json' // 'X-Requested-With': 'XMLHttpRequest'\n            // 'Authorization': 'Bearer ' + this.state.clientToken,\n\n          },\n          withCredentials: true\n        }).then(response => {\n          if (response.status === 200) {\n            response.json().then(data => {\n              if (!cleanupFunction) setUserData(data);\n            });\n          }\n        });\n      })();\n    }\n\n    return () => cleanupFunction = true;\n  }, []);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: stylesOffice.containerOffice,\n    children: [/*#__PURE__*/_jsx(RefferalHead, {\n      classes: classes,\n      user: user,\n      userData: userData\n    }), /*#__PURE__*/_jsx(RefferalBody, {\n      classes: classes,\n      user: user,\n      userData: userData\n    })]\n  });\n};\n\nexport default RefferalView;","map":null,"metadata":{},"sourceType":"module"}